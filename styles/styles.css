@charset "UTF-8";
@import url("https://fonts.googleapis.com/css?family=Press+Start+2P&display=swap");
article, aside, details, figcaption, figure, footer, header, hgroup, nav, section, summary {
  display: block;
}

audio, canvas, video {
  display: inline-block;
}

audio:not([controls]) {
  display: none;
  height: 0;
}

[hidden] {
  display: none;
}

html {
  font-family: sans-serif;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
}

a:focus {
  outline: thin dotted;
}

a:active, a:hover {
  outline: 0;
}

h1 {
  font-size: 2em;
}

abbr[title] {
  border-bottom: 1px dotted;
}

b, strong {
  font-weight: 700;
}

dfn {
  font-style: italic;
}

mark {
  background: #ff0;
  color: #000;
}

code, kbd, pre, samp {
  font-family: monospace, serif;
  font-size: 1em;
}

pre {
  white-space: pre-wrap;
  word-wrap: break-word;
}

q {
  quotes: “”‘’;
}

small {
  font-size: 80%;
}

sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

img {
  border: 0;
}

svg:not(:root) {
  overflow: hidden;
}

fieldset {
  border: 1px solid silver;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

button, input, select, textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0;
}

button, input {
  line-height: normal;
}

button, html input[type=button], input[type=reset], input[type=submit] {
  -webkit-appearance: button;
  cursor: pointer;
}

button[disabled], input[disabled] {
  cursor: default;
}

input[type=checkbox], input[type=radio] {
  box-sizing: border-box;
  padding: 0;
}

input[type=search] {
  -webkit-appearance: textfield;
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  box-sizing: content-box;
}

input[type=search]::-webkit-search-cancel-button, input[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

textarea {
  overflow: auto;
  vertical-align: top;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

body, figure {
  margin: 0;
}

legend, button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

.clearfix:after {
  visibility: hidden;
  display: block;
  font-size: 0;
  content: "";
  clear: both;
  height: 0;
}

* {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

.visuallyHidden:not(:focus):not(:active) {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;
  white-space: nowrap;
  clip-path: inset(100%);
  clip: rect(0 0 0);
  overflow: hidden;
}

html {
  font-size: 62.5%;
}

body {
  font-size: 1.6rem;
  color: white;
  background: black;
  font-family: "Press Start 2P", sans-serif;
}

.wrapper {
  width: 80%;
  max-width: 1024px;
  margin: 0 auto;
  text-align: center;
}

.container {
  display: inline-block;
  max-width: 100%;
}

h1, h2, p, ul, li {
  margin: 0;
  padding: 0;
}

a {
  text-decoration: none;
  color: yellow;
}

h1 {
  margin: 2rem auto;
  text-align: center;
  text-transform: uppercase;
}

.infoContainer {
  display: flex;
  flex-direction: row;
  align-items: flex-end;
  justify-content: space-between;
  text-transform: uppercase;
}
.infoContainer .left {
  text-align: left;
}
.infoContainer .right {
  text-align: right;
}

footer {
  text-align: center;
  font-size: 1.2rem;
}
footer p {
  margin: 0 auto;
}

@keyframes flash {
  0% {
    background: white;
  }
  50% {
    background: blue;
  }
  100% {
    background: white;
  }
}
@keyframes munch {
  0% {
    clip-path: polygon(50% 50%, 150% 150%, 150% 150%, -50% 150%, -50% -50%, 150% -50%, 150% -50%);
  }
  50% {
    clip-path: polygon(50% 50%, 150% 50%, 150% 150%, -50% 150%, -50% -50%, 150% -50%, 150% 50%);
  }
  100% {
    clip-path: polygon(50% 50%, 150% 150%, 150% 150%, -50% 150%, -50% -50%, 150% -50%, 150% -50%);
  }
}
.tile {
  width: 100%;
  padding-bottom: 100%;
  background: black;
}
.tile.food {
  position: relative;
}
.tile.food::before {
  content: "";
  background: white;
  position: absolute;
  width: 25%;
  height: 25%;
  border-radius: 50%;
  top: calc(50% - 25% / 2);
  left: calc(50% - 25% / 2);
}
.tile.power {
  position: relative;
}
.tile.power::before {
  content: "";
  background: white;
  position: absolute;
  width: 60%;
  height: 60%;
  border-radius: 50%;
  top: calc(50% - 60% / 2);
  left: calc(50% - 60% / 2);
}
.tile.wall {
  position: relative;
}
.tile.wall.topLeftCorner, .tile.wall.topRightCorner, .tile.wall.bottomLeftCorner, .tile.wall.bottomRightCorner {
  width: calc(50% + 1.5px);
  padding-bottom: calc(50% - 1.5px);
  border-color: blue;
  border-width: 3px;
}
.tile.wall.topLeftCorner {
  margin: calc(50% - 1.5px) 0 0 calc(50% - 1.5px);
  border-style: solid none none solid;
  border-radius: 50% 0 0 0;
}
.tile.wall.topRightCorner {
  margin: calc(50% - 1.5px) calc(50% - 1.5px) 0 0;
  border-style: solid solid none none;
  border-radius: 0 50% 0 0;
}
.tile.wall.bottomRightCorner {
  border-style: none solid solid none;
  border-radius: 0 0 50% 0;
  margin: 0 calc(50% - 1.5px) calc(50% - 1.5px) 0;
}
.tile.wall.bottomLeftCorner {
  border-style: none none solid solid;
  border-radius: 0 0 0 50%;
  margin: 0 0 calc(50% - 1.5px) calc(50% - 1.5px);
}
.tile.wall.horizontal, .tile.wall.vertical {
  background: blue;
}
.tile.wall.horizontal {
  height: 3px;
  padding: 0;
  margin: calc(50% - 1.5px) 0 calc(50% - 1.5px) 0;
}
.tile.wall.vertical {
  width: 3px;
  padding: 0;
  margin: 0 calc(50% - 1.5px) 0 calc(50% - 1.5px);
}
.tile.door {
  position: relative;
}
.tile.door::after {
  content: "";
  position: absolute;
  left: 0;
  right: 0;
  top: calc(50% - 1.5px);
  bottom: calc(50% - 1.5px);
  background: hotpink;
}

.game {
  display: grid;
  position: relative;
  grid-template-columns: repeat(28, 1fr);
  width: calc((28 * 70vh / 31));
  max-width: calc(100vw - 2rem);
  margin: 0 auto;
}
.game .messages {
  position: absolute;
  z-index: 20;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  color: white;
  font-size: 2rem;
  text-transform: uppercase;
}
.game .messages.hide {
  display: none;
}

@keyframes ghostWalk {
  0% {
    clip-path: polygon(100% 0, 0 0, 0 80%, 0 100%, 20% 80%, 40% 100%, 60% 80%, 80% 100%, 100% 80%, 100% 80%);
  }
  100% {
    clip-path: polygon(100% 0, 0 0, 0 80%, 0 80%, 20% 100%, 40% 80%, 60% 100%, 80% 80%, 100% 100%, 100% 80%);
  }
}
.character {
  position: absolute;
  height: 10px;
  width: 10px;
  top: 0;
  left: 0;
}
.character.player::after {
  content: "";
  position: absolute;
  width: 100%;
  height: 100%;
  background: yellow;
  border-radius: 50%;
  transform: translateX(-50%) rotate(0deg);
  clip-path: polygon(50% 50%, 150% 150%, 150% 150%, -50% 150%, -50% -50%, 150% -50%, 150% -50%);
}
.character.player.moving::after {
  animation: munch 0.3s linear infinite;
}
.character.player.movingLeft::after {
  transform: translateX(-50%) rotate(180deg);
}
.character.player.movingUp::after {
  transform: translateX(-50%) rotate(-90deg);
}
.character.player.movingDown::after {
  transform: translateX(-50%) rotate(90deg);
}
.character.redGhost, .character.orangeGhost, .character.blueGhost, .character.pinkGhost {
  border-radius: 50% 50% 0 0;
  clip-path: polygon(100% 0, 0 0, 0 80%, 0 100%, 20% 80%, 40% 100%, 60% 80%, 80% 100%, 100% 80%, 100% 80%);
}
.character.redGhost.moving, .character.orangeGhost.moving, .character.blueGhost.moving, .character.pinkGhost.moving {
  animation: ghostWalk alternate linear 0.6s infinite;
}
.character.redGhost::after, .character.redGhost::before, .character.orangeGhost::after, .character.orangeGhost::before, .character.blueGhost::after, .character.blueGhost::before, .character.pinkGhost::after, .character.pinkGhost::before {
  content: "";
  position: absolute;
  width: 15%;
  height: 15%;
  background: black;
  border: white solid;
  border-width: 0.4vmin;
  border-radius: 50%;
}
.character.redGhost.movingRight::before, .character.redGhost.movingRight::after, .character.orangeGhost.movingRight::before, .character.orangeGhost.movingRight::after, .character.blueGhost.movingRight::before, .character.blueGhost.movingRight::after, .character.pinkGhost.movingRight::before, .character.pinkGhost.movingRight::after {
  border-width: 0.4vmin 0.1vmin 0.4vmin calc(2*0.4vmin - 0.1vmin);
}
.character.redGhost.movingLeft::before, .character.redGhost.movingLeft::after, .character.orangeGhost.movingLeft::before, .character.orangeGhost.movingLeft::after, .character.blueGhost.movingLeft::before, .character.blueGhost.movingLeft::after, .character.pinkGhost.movingLeft::before, .character.pinkGhost.movingLeft::after {
  border-width: 0.4vmin calc(2*0.4vmin - 0.1vmin) 0.4vmin 0.1vmin;
}
.character.redGhost.movingUp::before, .character.redGhost.movingUp::after, .character.orangeGhost.movingUp::before, .character.orangeGhost.movingUp::after, .character.blueGhost.movingUp::before, .character.blueGhost.movingUp::after, .character.pinkGhost.movingUp::before, .character.pinkGhost.movingUp::after {
  border-width: 0.1vmin 0.4vmin calc(2*0.4vmin - 0.1vmin) 0.4vmin;
}
.character.redGhost.movingDown::before, .character.redGhost.movingDown::after, .character.orangeGhost.movingDown::before, .character.orangeGhost.movingDown::after, .character.blueGhost.movingDown::before, .character.blueGhost.movingDown::after, .character.pinkGhost.movingDown::before, .character.pinkGhost.movingDown::after {
  border-width: calc(2*0.4vmin - 0.1vmin) 0.4vmin 0.1vmin 0.4vmin;
}
.character.redGhost::after, .character.orangeGhost::after, .character.blueGhost::after, .character.pinkGhost::after {
  top: 20%;
  left: 10%;
}
.character.redGhost::before, .character.orangeGhost::before, .character.blueGhost::before, .character.pinkGhost::before {
  top: 20%;
  right: 10%;
}
.character.redGhost {
  background: red;
}
.character.orangeGhost {
  background: orange;
}
.character.blueGhost {
  background: cyan;
}
.character.pinkGhost {
  background: pink;
}
.character.afraid {
  background: blue;
}
.character.afraid.endWarning {
  animation: ghostWalk alternate linear 0.6s infinite, flash 0.5s steps(1) infinite;
}
.character.captured {
  background: transparent;
  animation: none;
}

.fruit {
  position: absolute;
  transform: translateX(-50%) translateY(-50%);
  font-size: calc(1rem + 1vmin);
}

.lives .player {
  position: relative;
  width: 2rem;
  height: 2rem;
  margin-right: 0.2rem;
  display: inline-block;
}
.lives .player::after {
  transform: none;
}

.fruits {
  margin: 0;
  font-size: calc(1rem + 1vmin);
}

@media (orientation: portrait) {
  .wrapper {
    width: 100%;
  }

  .game {
    width: calc((28 * 70vh / 31));
  }
}
